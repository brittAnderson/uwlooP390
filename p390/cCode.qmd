## Coding

For a lot of the above we need to know how to code. In order to write code we need minimally to answer two questions. What language? What tooling?

### Languages

What should I consider when selecting a programming language? Will it do what I need it to do now and tomorrow.

-   Is SPSS a good language for statistics?
-   Is R a good language for statistics?
-   Is Python a good language for statistics?
-   Is R a good language for coding a web app?
-   Is R a good language for coding an in-lab visual experiment?
-   Should you use Julia? Common Lisp? Haskell? Lean? OCaml? Rust? Go?

::: {.content-hidden}
Break up class to do some quick research and make a case for each. Goal is to help them see the diversity of what is out there. One of the ideas is the Swiss Army Knife idea. It is a pretty handy to thing to have, but is it the best tool for anything?

:::

How do you *future proof*?
-   If languages go in and out of fashion what is it you should really be learning about programming? What are good coding practices? 

::: {.content-hidden} 
Another possible classroom exercise.
-   documentation
-   small functions
-   avoid spaghetti
-   use libraries

:::

### IDEs

-   Who are you writing code for? Human or Machine?
-   What is an IDE? What makes for a good IDE?

#### Using an IDE

For this course we will default to [VSCode](https://code.visualstudio.com/), because it is currently very popular and becoming somewhat of a standard. Everything said above about not getting to attached to the flavor of the month applies to IDEs. Especially since VSCode is a tool tied to Microsoft. However, there is an [opensource build](https://vscodium.com/) of VSCode that you can use instead. You can also use any other tool you want to as long as you can figure out how to make it do the things I will ask you to do. I, for one, live in [Emacs](https://www.gnu.org/software/emacs/).

#### VSCode

{{< video https://www.youtube.com/embed/B-s71n0dHUk?si=y3fy80M0mGxGLwr5
    title="Learn Visual Studio Code in 7 Minutes"
>}}

-   [Basics video](https://code.visualstudio.com/docs/introvideos/basics)
-   [Using VSCode with R](https://code.visualstudio.com/docs/languages/r)
-   [Using VSCode with Python](https://code.visualstudio.com/docs/languages/python)

*Exercise* Install VSCode

#### Jupyter Notebooks

What are jupyter notebooks? Are jupyter notebooks ide's? What are their purpose? What languages to they support? MORE TO ADD

#### Beginning with Jupyter and Quarto/VS

Good instructions are on the Quarto [website](https://quarto.org/docs/tools/vscode-notebook.html). Note those terminal commands. 

You could at this point use the brower interface for editing your ipynb file with `{sh} python3 -m jupyter lab ` or you could open a file in VS Code.

Make sure you have the jupyter extension for vscode. Then you will want to create or open a new jupyter file and select the appropriate kernel (initially use python). If you are in the correct directory and had previously created a virtual environment then all should be good to go. And you can *in the terminal* invoke the quarto command to see your document with `quarto preview my-demo-notebook.ipynb`.

### Programming Languages

#### Basic Constructs
- Variables
  Variables are things (lists, values, names, and such) that you want to give a name to. You might do this because you think you are going to want to do something with them later and it might be more convenient to have a short, memorable name for referring to them.
- Functions
  These have inputs and output. The inputs may be called parameters. Sometimes the outputs are called return values. What the function does is describe the processing of the inputs to the outputs. Think of a factory. It takes in raw materials (inputs) and produces an output. You are describing a factory when you write a function. 
- Interpretation and compilation. 


#### R

##### Installation
- OSX
- Windows
- Linux

[Download the CORRECT R](https://cran.r-project.org/downloads)

Follow the appropriate instructions for your operating system. 

If that went well, you need to make sure you restart VS Code and then click on the little set of squares at the left to install the R extension for VS Code. If you are using VS Code for your IDE as recommended.

If that goes well check out the [book](https://r4ds.hadley.nz/) on using R that is itself written in Quarto, by the programmer who authored the tidyverse (see below). And make sure you can create a file in VSCode as a quarto document, cut and paste in some R code, and see the whole thing compile to a web page. 

##### Working Methods - Generally

Have your code open in a window and a terminal open running the R interpreter for testing and checking. 

Test your system by, 
1. `cd` to the directory where you want to work. 
2. open a .R file in your editor.
3. open a terminal that points to the same directory
   you can move with `cd` and check your location with `pwd`.
4. Verify that you can open R there by typing `r` and then hit enter. 
   If you need to quit you can type `quit()`.


##### Packages/Libraries

Many programming languages are very basic in what they offer. In order to do the cool stuff you will need additional collections of code, some of it may even be written in a different programming language, often called packages or libraries that you import, source, or load. `ggplot2` was an example of that for R and `matplotlib` for python. 



::: {#fig-installRpackage}

```r
install.packages("tidyverse")
library{tidyverse}
```

This is an example of installing a package in R and then using it. 
Note the inconsistent use of quotation marks.

:::


The [tidyverse](https://www.tidyverse.org/) is a very popular collection of R code that itself will depend on many additional pieces of R code and other packages, some R and some not. I personally often try to just use "base plot", but most people seem to prefer the "tidyverse".

Here is an example of embedding R code in a qmd document. This is very useful when you get to the stage of data analysis or writing your research report. But when you are first exploring the data it is often better to work directly in an R environment and record your code in an .R file to make it easy to replay and edit your work as you go. 

```{r}
#| warning: false
if(!require(tidyverse)){
    install.packages("tidyverse")
}
if(!require(palmerpenguins)){
    install.packages("palmerpenguins")
}
library(tidyverse)
library(palmerpenguins)

ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g, color = species)
) +
  geom_point() +
  geom_smooth(method = "lm")
```


 
##### Types

Many programming languages have a notion of a datatype. `1` can be a number, but "1" can also be a character that you are typing. It doesn't make sense to add one, the number, to one, the character, but it might make sense to `1 + 1` for either. You would expect 2 for numbers and maybe "11" for characters. R in particular has many complicated data types that represent the output of functions and statistical analyses. If things are getting confusing you might want to check on the type of your data. 

::: {#fig-rchecktype}

```{r}
a = 1
typeof(a)
```

Checking the type of a number in R.

:::


Other data structures that you might run across are:
- Lists, 
- Tuples, 
- Data.Frames



::: {#fig-rdatatypes}

```{r}
tpl = c(1,2)
lst = list("firstName" = 'Britt', "lastName" = 'Anderson')
df = data.frame('fn' = c("bob","jane","griffin"),"gndr" = c('m','f','o'))
df
```

Each of three datatypes in R are demonstrated. Think of data.frames as a supercharged spreadsheet with columnn names.

:::

##### Data.Frames

`Data.Frames` are particularly central to the R analysis model and are a killer feature. They are also moving into the python analysis space. Let's look at the cars
data frame that comes as part of the base R installation. You can
verify it is installed like this.

```{r}
is.data.frame(cars)
head(cars)
```


##### Selecting Data

A bit of code that tests for whether something is true or false can be called a *predicates*. These are important when having your code do something conditionally. If this is true then do this otherwise do that. This common construct of "if-then-else" exists in most programming languages. 
    

::: {#fig-booleansinR}

```{r}
length(cars$dist[cars$speed > 10 & cars$speed < 20])

```

How many cars are there that can go faster than 10, but not more than 20?

:::

How would you do that in Excel?


What is going on here?
1. `cars` is the name of the data frame.
2. We access a *column* of the data frame with the dollar sign notation `cars$dist`. You can see the names of the columns in a data frame with `names(cars)`.
3. We use the square brackets to *index* the column of data we are interested in. Here we do not use specific numbers, but rather we use a *boolean* to compare the values in a column and we only include the *TRUE* values. Here we ask for all the indices where the speed is greater than 10, but less than 20, and we use those indices to get the values for the `dist` column. 

**Practice**

1. Sort (or ~order~) cars by the ~dist~ variable.
2. Find the mean and standard deviation of the speed of the cars.
3. Are there other datasets?   
   ```{{r}} 
   library(help="datasets")
   
   ```
4. Open any of the datasets that catches your eye.
5. What are the column names?
6. How many rows?
7. What is the *comment* designator for R?
8. What is the ending extension of an R script?


##### Loops

::: {.callout-tip}
Loops are very different between python and R. You use them a lot more in python than R. R often allows you to "map" over data.

:::

`For` loops are the most common looping construct. 

```{r}
ml <- seq(1:10)
for  (m in ml) {
  print(m)
}
```

Another kind of loop is the `while` loop.

*Test your understanding with more practice.*

1. Edit the above so that it prints the individual number each time it goes through the loop, and not the whole list.

*Another project*
1. Create a list of at least 8 individual characters.
2. Make sure they are **not** in alphabetical order
3. Print the letters one at a time.
4. Print the letters sorted alphabetically one at a time, but *do not* overwrite your original list.
5. Print the letters from both lists with a `format` command that says which position the letter is in.

```{r}
#| code-fold: true
#| eval: false
#| 
myName = "brittAnderson"
myList = unlist(strsplit(myName,""))

for (l in myList){
  print(l)
  }

for (l in myList[order(myList)]){
  print(l)
  }

i = 1
for (n in order(myList)){
  t  <- sprintf("The %.0fth letter of myList is: %s, but is %s in the sorted list.",i,myList[i],myList[n])
  print(t)
  i = i+1  
  }

```

##### Examples of Functions

```{r}
myadd  <- function(x,y) { # <1>
  return(x+y)             # <2>
  }
```
1. The arrow is used to assign something to a name. Other languages usually use the equals sign. The keyword `function` tells R you are creating a function, and the parentheses following establishes the number of inputs and the nicknames you will use in your function. 
2. `return` specifies what we want to get back from the function. 


Now we can use the function we defined with particular inputs. 

```{r} 
myadd(2,3)
```

A few years ago I made a video talking about some of these features, but I used a different IDE from VS Code. 

<div style="padding:56.39% 0 0 0;position:relative;"><iframe src="https://player.vimeo.com/video/460262930?h=894daf7c20" style="position:absolute;top:0;left:0;width:100%;height:100%;" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen></iframe></div><script src="https://player.vimeo.com/api/player.js"></script>
<p><a href="https://vimeo.com/460262930">Hc : Walking Through the R Topic (i2c4p)</a> from <a href="https://vimeo.com/epistemic">Britt Anderson</a> on <a href="https://vimeo.com">Vimeo</a>.</p>


#### Python

::: {.callout-note}
If the following doesn't go smoothly for you check out the additional suggestions in the [python-venv appendix](python-venv.qmd).
:::

##### Installation

[Installation Instructions](https://code.visualstudio.com/docs/languages/python)

Install the `mathplotlib` and `numpy` packages.

::: {.callout-tip title="Class Discussion"}
What is a "package" when talking about programming languages? What is a "library"? What is an "executable"?
:::


::: {.callout-warning}
Ask me about virtual environments!
:::

[setting up a venv in vscode and python](https://dev.to/emminex/how-to-install-python-libraries-in-visual-studio-code-38i1)

##### Testing
::: {.callout-warning}
You may need to install the "reticulate" package for R if you want to run both python and R code in the same document as I am trying to do here. 
:::

```{python}
#| warning: false
#| echo: false


import matplotlib.pyplot as plt
import numpy as np

# fake data
np.random.seed(19680801)
data = np.random.lognormal(size=(37, 4), mean=1.5, sigma=1.75)
labels = list('ABCD')
fs = 10  # fontsize
fig, axs = plt.subplots(nrows=2, ncols=3, figsize=(6, 6), sharey=True)
axs[0, 0].boxplot(data, tick_labels=labels);
axs[0, 0].set_title('Default', fontsize=fs);
axs[0, 1].boxplot(data, tick_labels=labels, showmeans=True);
axs[0, 1].set_title('showmeans=True', fontsize=fs);
axs[0, 2].boxplot(data, tick_labels=labels, showmeans=True, meanline=True);
axs[0, 2].set_title('showmeans=True,\nmeanline=True', fontsize=fs);
axs[1, 0].boxplot(data, tick_labels=labels, showbox=False, showcaps=False);
tufte_title = 'Tufte Style \n(showbox=False,\nshowcaps=False)';
axs[1, 0].set_title(tufte_title, fontsize=fs);
axs[1, 1].boxplot(data, tick_labels=labels, notch=True, bootstrap=10000);
axs[1, 1].set_title('notch=True,\nbootstrap=10000', fontsize=fs);
axs[1, 2].boxplot(data, tick_labels=labels, showfliers=False);
axs[1, 2].set_title('showfliers=False', fontsize=fs);

for ax in axs.flat:
    ax.set_yscale('log');
    ax.set_yticklabels([]);

fig.subplots_adjust(hspace=0.4)
```

::: {.callout-warning}
Python cares about whitespace. It is strongly recommended that you only use spaces and not tabs when writing python code. 
:::

::: {#fig-loopinpython}

```{python}
my_name = "britt"                          # <1>
my_name_as_list = list(my_name)            # <2>
for i, j in enumerate(my_name_as_list):    # <3>
  print((i, j))

```
1. Assignment in python does not use the arrow like R does.
2. Strings and lists are different *types* of data. I have to coerce my string to a list.
3. Python has conventions to make it easy to define multiple looping variables at once. 


What a for loop might look like in python.

:::

##### Some programming vocabulary

If you want to watch a video that reviews some of the programming vocabular and examples typed out (using Emacs and not VS Code) the following video may be of use. 

<div style="padding:56.39% 0 0 0;position:relative;"><iframe src="https://player.vimeo.com/video/458286198?h=952e09c8dc" style="position:absolute;top:0;left:0;width:100%;height:100%;" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen></iframe></div><script src="https://player.vimeo.com/api/player.js"></script>
<p><a href="https://vimeo.com/458286198">Gd : Common programming terms (i2c4p)</a> from <a href="https://vimeo.com/epistemic">Britt Anderson</a> on <a href="https://vimeo.com">Vimeo</a>.</p>
<p>An overview of a few basic and fundamental programming terms.</p>

::: {.callout-important}
Python is a dynamically typed language. Python will try to guess the type of your data or change it based on context. 

:::

##### Assignment and Equality Are Different in Programming

Assignment means you are assigning a name to something. Equality is that you are testing if they are the same. One equals sign does not equal two equals sign. That is ` = != ==`. Exclamation points are often used to *negate* something (turn true to false and vice versa).


```{python}
a = 2
print(a == 3)

```

 ##### For loop details in python
 
 Python refers to things called "iterables." To iterate is another way of saying something you can keep doing the same thing over and over to. Imagine a bowl of ice cream. It is "eatable". You take one spoon, and keep taking spoonfuls until the bowl is empty. 

Indexing is how you get the location of an element in a list. Think of the row or column number in a spread sheet program, but indexes can be more powerful, and can be nested easily. In many programming languages, but sadly not all, **indexes start at 0**. Different programming languages will have slightly different syntax. 

::: {#fig-indexinginpython}


```{python}
name_dict = {'firstName' : 'Britt', 'lastName' : 'Anderson'}
my_list = list(range(1, 10))                                      # <1>
print(name_dict['firstName'])
print(my_list)
print(my_list[0])
print(my_list[-1])
print(my_list[0:4])

```
1. Notice that here we use `range` where we used `seq` in R. There is usually a way to do something similar in both languages, but they may not have the same name.


The use of the `-1`as an index is a python trick for getting the last element in a list. Think of the list as a circle. If you count backwards from a list you will get to the beginning eventually (index 0) if you went back one more step (-1) you would circle back to the end of the list. Test what happens when you try -2. Does it keep going? A lot of learning how to program is just doing stuff to see what happens.


:::

**A `for` loop in python**

```{python}
for ml in my_list:
  print(ml)

for i, ml in enumerate(my_list):
  print("The {0}th element was {1}".format(i, ml))
```

**Conditionals in python**

```{python}
if 2 == 3:
  print("Wha.....?\n\n")
elif 3 == 2:
  print("Now that is odd")
else:
  print("2 does not equal 3.")

```

Note that we use colons and white space to organize code in python, not the {} of R. 

::: {.callout-important}
Python uses a different syntax to define functions from R.
:::


```{python}
def my_add(x, y):
  return(x + y)

```


##### Popular and Useful Python Libraries
  
1. Numpy
2. Scipy
3. Matplotlib
4. Pillow
5. Sympy

#### Javascript

##### Installation

Since javascript is already included in most browsers you likely have a basic version of javascript installed, and you can get started with almost no additional tools. As a quick illustration open up your favorite browser and look in the settings or options for something like "more Tools". Somewhere in that menu should be a web tools or web developer tools entry. Click it, and you should see something that looks like your VS Code screen with terminal like objects at the bottom. One of those is the *console*. Select it. Then you can create a function and use it with something like:

:::{code-js-demo}

```{js}
#| eval: False

function add(a,b=10){return a + b}
```

A simple javascript function.

:::

##### A Better Way to Go

Even though there is a convenience factor in using your browser's console it is a very limited way to code. It is fine for testing out a line or two of javascript, but to actually code something you will want an actual development environment, and we will use VS Code. 

To code javascript outside the browser you need a proper environment such as [Node.js](https://nodejs.org/en). There are many ways to install this, but if you are new to javascript using the official installer is probably best. To check if the installation went well you can run `node -v` inside a terminal. You should see a version number. If you are sure you downloaded things correctly you may have to set your path so your terminal can find the installation. 

To test your installation you can create a test folder, e.g. call it "hello" and open that folder in VS Code. Then create a new file "app.js". VS Code should give you a lot of help out of the box as you enter: 

```{js}
#| eval: false

var msg = 'Hello World';
console.log(msg);

```

After saving you should be able to move down into your terminal and run `node app.js` to then see "Hello World" printed.[^1]

[^1]: This example comes from [this node tutorial](https://code.visualstudio.com/docs/nodejs/nodejs-tutorial).



