# Version Control {#sec-versionControl}


## Getting Started - Some old videos on git from PSYCH363/310

A few years ago when I was teaching a more elementary version of some of this material (PSYCH363) I included some videos on git and using Github. Some components of these videos may be a bit out of date, and a few things about the interface  have changed. Still they may be a reasonable starting point for those of you who feel you need a refresher on version control. Note that for PSYCH390 I am assuming you can either already use version control or figure it out on your own. I will give some class time for getting things working, but mostly you will have to pursue this on your own. The notes here are intended to be prompts and guides, but not to be comprehensive.

You will notice that in the videos I talk a lot about Linux. We are not using that for this course so you can ignore those references. However, I do demonstrate the use in the *terminal*. That is available to all of you regardless of operating system. You will just have to find your own OS version of it.  

Frequenly you will see this referred to as a command line tool ("cli"). It is now easier to get [this](https://cli.github.com/) this working on Windows and OSX than it used to be. For OSX you can also check out **Homebrew**. For the adventurous Windows user you can look at WSL2.

## An overview of git and Github

{{< video https://vimeo.com/456349738 title = " A quick overview of Git and Github" >}}



## You have choices - other version control system

1. [Mercurial](https://www.mercurial-scm.org/)
2. [Darcs](http://darcs.net/)
3. [CVS](https://www.nongnu.org/cvs/)
4. [Subversion](https://subversion.apache.org/)
5. [Pijul](https://pijul.org/)

Each has their own fans. CVS and Subversion are more legacy options, but you will still see them occasionally. Darcs is more of an experiment than a broadly used system. Mercurial used to be the cool kid, but now seems eclipsed by *Pijul*. That is the one for experimental users. 

## Git is not Github
Git is the version control software. Github is a very popular place to host your publically accessible git repository, but it is far from your only option. You can host elsewhere. 

1. [OSF.io](https://osf.io/)
    For scientists OSF.io seeks to make itself a way to host scientific projects and their data. Trivia question? Do I have any repositories on Osf.io?
2. [Sourceforge](https://sourceforge.net/)
    An oldie, but still used.
3. [Bitbucket](https://bitbucket.org/)
4.  Gitlab
    The university provides you with a gitlab account:  <https://git.uwaterloo.ca>
5. [Codeberg](https://codeberg.org/) If you believe in freedom and neck beards. 


## Things you should do
1. Install git
2. Get an account on github
3. Fork the course repository
4. Clone the course repository to your laptop
5. Set up my version as an additional **remote**.
6. See if you can make a "pull request" to me. 
   You may find that you have to set up an **ssh key** in order to efficiently pull and push to Github.
   Github has very clear [instructions](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent) on how to go about doing this. 

## But first

If you have not used git before you will have to configure git. It needs to know who you are and how to reach you at least. 

You can execute commands like this in your terminal:

```zsh
git config --global user.name "John Doe"
git config --global user.email johndoe@example.com

```

More on these configuration options can be found [in a nice online book](https://git-scm.com/book/en/v2/Getting-Started-First-Time-Git-Setup).


## Understanding Git and the Workflow in Pictures

When starting to use git I found it very confusing to tell what was where and what direction things were going when I pushed and pulled. I found pictures helpful adjuncts to the prose descriptions. A few helpful illustrations to the distinction of clones, forks, pull, push, and pull request can be found [here](https://www.toolsqa.com/git/difference-between-git-clone-and-git-fork/).

I also made a little video to try and illustrate some of these concepts a few years ago. Read for the gist and not for the specific examples.


{{< video https://vimeo.com/456349595 title = "another test" >}}

## Principal Terms to Learn First

-   **Fork:** A copy of one github repository to another **github** repository.
-   **Clone:** A copy of one **git** repository to another **git** repository. 
    The first repository might be hosted on github, but the second one, the *cloned* one exists on a local machine. In your case this is probably your laptop.
-   **Remote:** This is a repository that you are following. You will typically *pull* from these, but your *push* permissions may be limited depending on the distinctions between forks and clones, and whether you own the remote or someone else does. You can have more than one remote.
-   **Pull:** the transfer of information and changes **from** one repository incorporated into another. This is how you get the new information from a remote transported to a local repository that you control.
-   **Push:** this is the transfer of information **to** a repository you control (or have permissions to push to) from another repository that you control. This is often from your local laptop version to the hosted repository (your fork) on github.
-   **Pull Request:** When you have information or changes that you think would be helpful to a remote you do **not** have push permissions for then you can request that the owner of that repository pull in your changes. This is a formal process called a pull request. It is primarily a github concept and not a git concept.
-   **Branch:** within a repository the development of the code may be proceeding in a few different directions at the same time. The principal production branch is conventionally called **master**. And the principal repository that is the main, shared one is called **origin**. We will not be working with branches in our course, but those terms do show up in commands.

All of these "[basics](https://git-scm.com/book/en/v2/Git-Basics-Getting-a-Git-Repository)" are covered in detail in the book Pro Git (available on line). 

