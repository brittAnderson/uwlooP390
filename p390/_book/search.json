[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Psych 390",
    "section": "",
    "text": "Preface\nThis is a Quarto book. Quarto can be seen as a successor to RStudio and Rmd files. If you have not heard of those do not worry. If you have you will see that most things are quite similar.\nI will be using Quarto in this class (PSYCH390 W2025) to help us practice writing reproducible code and papers. There are many different systems that can accomplish the same goal and we will look at a few of them so that you are not anchored to any one system. But in order to have one shared experience and to move beyond the basics, at least a bit, we will use this tool.\nOne of the key lessons for learning to use your computer effectively as a research tool is learning how to do things generally; rather than mastering one particular variety of software we want to be able to figure out how to use whatever is the right tool for a particular application. Our needs may change as our science evolves, and the tools available to us will definitely change. You don’t want to be stuck 20 years from now using the software you learned in University. If you are, your science will suffer, and you will be less able to tackle the problems that interest you. Instead of doing the key experiment, you will be figuring out how to do the experiment that is most like, but not quite, the right one, but is as well as you can do with the old software you know how to use.\nTo learn more about Quarto books from the Quarto people visit https://quarto.org/docs/books.\nTo learn more about the specifics of how we are going to use Quarto, and what else we will experiment with along the way, stay tuned.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This is a book created for PSYCH390 at the the University of Waterloo\nWe will try to write this book together with each week or so getting its own chapter. You should be able to edit the files in this book yourself to add and correct things. We will learn more about that in the weeks ahead. As a first step see if you can clone the git repository for course course.\nYou might find some of this older material in appendix A on using git useful for getting started.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "cCmpResTool.html",
    "href": "cCmpResTool.html",
    "title": "2  The role of the computer as a tool in psychological research",
    "section": "",
    "text": "2.1 Research Project Stages\nTo begin learning how to use the computer as a tool for our research we have to first be clear on what that means. Before we go into specific tools let’s discuss the research process so we can better detect where there are opportunities for us to use computers and software to aid our work.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>The role of the computer as a tool in psychological research</span>"
    ]
  },
  {
    "objectID": "cCmpResTool.html#research-project-stages",
    "href": "cCmpResTool.html#research-project-stages",
    "title": "2  The role of the computer as a tool in psychological research",
    "section": "",
    "text": "2.1.1 Preliminaries\nHow do you decide what it is you are going to do? Look up and read the prior literature.\n\nHow do you find what to read?\nHow do you keep track of what you have read?\nHow do you organize your notes on what you have read?\nHow do you integrate and connect your notes and readings so as to discover new connections or ideas?\nHow to you make sure you can correctly cite the articles you have read when it comes to writing up your research proposal or research result.\n\nHow do you protect yourself against a change in databases or death of a harddrive?\n\n\n2.1.2 Do the research\nWhat skills are needed for this?\n\nProgram an experiment\nLanguage? Python; Javascript; other\n\nHow do you make stuff appear on a computer screen?\nHow do you verify the timing?\n\nHow do you make sure you can find the version of the experiment if you need to share it or re-use it.\nThere is a new tool in the lab with drivers and hardware. Can you download and install the necessary software?\nWhat happens to the data?\n\nHow do you store it?\nHow do you search it?\nWhat if it is big?\nWhat if it needs to be shared?\n\n\n\n\n2.1.3 Analyzing the Research\n\nHow do you organize the data?\nWorking on a big data project?\n\nHow do you get the data?\nCan you set up a database?\nSearch it?\n\nHow do you do statistics?\n\nWhat is the tool?\nCould you write your own analysis?\n\n\n\n\n2.1.4 Diseminate the Research\n\nWhat is the tool you use for writing your research?\nWhat is reproducibility?\nDoes your writing tool support it?\nHow do you make sure others can re-run your analyses?\nHow do you make sure that you can easily adapt your analyses and make sure the right figures are included when you update the data? Or that the p-values in the text are also adapted?\nHow do you change the citation format when you submit to a journal that does not want APA or an edit changes which of your citations is the first (so it changes when you use et al)?\n\n\n\n2.1.5 Make Your Research Open\n\n\n\n\n\n\nClass Question\n\n\n\n\nWhat is “open research”?\nShould research be open?\nHow many of your labs are following these practices?\n\n\n\nWhat are Open Science practices?\nA recommended reading: 10 strategies for open science\nAnd that is it for today.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>The role of the computer as a tool in psychological research</span>"
    ]
  },
  {
    "objectID": "cOpenResearch.html",
    "href": "cOpenResearch.html",
    "title": "3  Open Research Practices Continued",
    "section": "",
    "text": "3.1 Fair Principles\nTake a few minutes and see if you can determine what “Fair” stands. Then we can see if we agree. We can then use those principles to evaluate our research tools.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Open Research Practices Continued</span>"
    ]
  },
  {
    "objectID": "cOpenResearch.html#fair-principles",
    "href": "cOpenResearch.html#fair-principles",
    "title": "3  Open Research Practices Continued",
    "section": "",
    "text": "Fair principles\nFair guiding principles",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Open Research Practices Continued</span>"
    ]
  },
  {
    "objectID": "cOpenResearch.html#lab-notebooks",
    "href": "cOpenResearch.html#lab-notebooks",
    "title": "3  Open Research Practices Continued",
    "section": "3.2 Lab Notebooks",
    "text": "3.2 Lab Notebooks\nI will not actually be spending much time on this, but we could. It is a neglected practice in psychology to keep a lab notebook that is updated. Here are some options if you are interested in exploring this topic.\n\nJupyter notebooks in Psychology\n10 rules for lab notebooks (electronic)\nHow to keep a lab notebook\nPick an electronic lab notebook\nLab notebook 2023 guide",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Open Research Practices Continued</span>"
    ]
  },
  {
    "objectID": "cOpenResearch.html#bibliographic-tools-and-exercises",
    "href": "cOpenResearch.html#bibliographic-tools-and-exercises",
    "title": "3  Open Research Practices Continued",
    "section": "3.3 Bibliographic Tools and Exercises",
    "text": "3.3 Bibliographic Tools and Exercises\nThis would make sense to be discussed next since it fits with our outline of the process that commences with reading and cross referencing knowledge. However, we do not yet have available the tools that we will need to manage this, so we will defer this for now until ADDLINKHERE.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Open Research Practices Continued</span>"
    ]
  },
  {
    "objectID": "cOpenResearch.html#ides-and-writing-up-your-research",
    "href": "cOpenResearch.html#ides-and-writing-up-your-research",
    "title": "3  Open Research Practices Continued",
    "section": "3.4 IDEs and Writing up your Research",
    "text": "3.4 IDEs and Writing up your Research\n\n\n\n\n\n\nClass Question\n\n\n\nWhat does IDE stand for and what are examples of IDEs?\n\n\n\n3.4.1 VSCode\nThere are many powerful IDEs available. It will be useful for you to try more than one. However, at this moment in time the clear winner of the IDE popularity contest is Microsoft’s Visual Studio Code.\nSince I want you to learn to use your computer as a tool, and to continue to be able to do so when tooling changes, you need to be able to:\n\nLocate code/programs on the internet\nDownload and install that program to your computer\nLocate the help to begin to use the tool without formal instruction.\n\n\n\n\n\n\n\nIn-class Exercise\n\n\n\nLocate, download, install, and verify you can start VS Code.\n\n\n\n3.4.1.1 Some helpful links to get you started\n\nBasics Video\nUsing VSCode with Python\nUsing VSCode with R\nText Editor Page from Quarto Site\n\nWhat is “pip”? And why will you need to know?\n\n\n\n\n\n3.4.2 Overleaf\nVS Code is far from your only option. For technical writing and collaboration many scientists rely on Overleaf.\nNature will [let you submit your manuscript](https://www.nature.com/srep/author-instructions/submission-guidelines) from an Overleaf template.\nDon’t forget to do the overleaf homework assignment.\nBut know that you always have choices. You can [write LaTeX with Quarto](https://github.com/James-Yu/LaTeX-Workshop?tab=readme-ov-file) (see also).\n\n\n\n\n\n\nClassroom Discussion\n\n\n\nWhat is single source publishing? How does this idea impact your preference for tools like Overleaf and Quarto?",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Open Research Practices Continued</span>"
    ]
  },
  {
    "objectID": "cCode.html",
    "href": "cCode.html",
    "title": "4  Coding",
    "section": "",
    "text": "For a lot of the above we need to know how to code. In order to write code we need minimally to answer two questions. What language? What tooling?\n\n4.0.0.1 Languages\nWhat should I consider when selecting a programming language? Will it do what I need it to do now and tomorrow.\n\nIs SPSS a good language for statistics?\nIs R a good language for statistics?\nIs Python a good language for statistics?\nIs R a good language for coding a web app?\nIs R a good language for coding an in-lab visual experiment?\nShould you use Julia? Common Lisp? Haskell? Lean? OCaml? Rust? Go?\n\nHow do you future proof? - If languages go in and out of fashion what is it you should really be learning about programming? What are good coding practices?\n\n\n4.0.1 IDEs\n\nWho are you writing code for? Human or Machine?\nWhat is an IDE? What makes for a good IDE?\n\n\n4.0.1.1 Using an IDE\nFor this course we will default to VSCode, because it is currently very popular and becoming somewhat of a standard. Everything said above about not getting to attached to the flavor of the month applies to IDEs. Especially since VSCode is a tool tied to Microsoft. However, there is an opensource build of VSCode that you can use instead. You can also use anyother tool you want as long as you can figure out how to make it do the things I will ask you to do. I, for one, live in Emacs.\n\n\n4.0.1.2 VSCode\n\n\nBasics video\nUsing VSCode with R\nUsing VSCode with Python\n\nExercise Install VSCode\n\n\n4.0.1.3 Jupyter Notebooks\nWhat are jupyter notebooks? Are jupyter notebooks ide’s? What are their purpose? What languages to they support? MORE TO ADD\n\n\n\n4.0.2 Terminals\n\n\n\n\n\n\n\nClass Question\n\n\n\nWhat is a terminal?\n\n\nFind your terminal\nDifferent operating systems refer to the terminal differently.\nIn Windows the =CMD.exe= [fn:1] command is an approximation to a terminal as is the =Power Shell= [fn:2].\nFor OSX you navigate to you applications, find the folder “Utilities” and look in their for the terminal application.\nFor Linux it will depend on which particular flavor you have installed.\n\n4.0.2.1 Some Terminology\nWhile they do not mean exactly the same thing, you will often find the following terms being used relatively interchangeably. - terminal - shell - command line What they have in common is the idea of a text based interface to communicating with the operating system. What this means is that instead of opening a gui (gui: G raphical U ser I nterface) to navigate your file tree you do this with a text based system of commands.\n\n\n4.0.2.2 Some sample commands\n\n\n\n\nls\n\n\n\nFigure 4.1: Typing this command in your terminal will list the files and directory. What would you have to do to see the hidden files? How would you get more information about this function and how to use it?\n\n\n\n\n4.0.2.2.1 An Historical Aside\nIn the early days of computing people wrote their programs on punch cards. Some see the inspiration as the Jacquard machine. There are still programmers alive who can tell you their horror stories of tripping and falling and scattering their punch cards everywhere. Want to know if your program worked? Take it to the main frame data center, drop it off, and come back the next day to get your print out. Terminals came along as an alternative to communicating with big central processors. There was a screen and keyboard. By typing you could send input to the computer that returned the output to your screen. The terminals we have today are not true terminals, but emulators. Though few people refer to them as such. We emulate this old way of communicating to the processor because it works and is efficient.\n\n\n\n4.0.2.3 Why use a terminal?\nYou can get more done. You can get it done more quickly. Once you learn to do one hard thing you never have to figure out how to do it again, because you can easily script it. That is why you want to learn to use the terminal\nTerminals are ubiquitous. They are low in their resource usage. They permit remote logins without the need for sending graphics back and forth. In fact, the remote computer need not have a system installed for displaying windows or even a physical screen attached (called headless).\nKnowing how to use a terminal will allow you to use =ssh= to connect to remote hosts. It will allow you to quickly and efficiently navigate your system, and it will make it easy for you to do things that used to take ages.\n\n\n4.0.2.4 A scripting example\nWant to convert and compress a large directory of videos as I did for this course. No need to open up each in an application and click a bunch of mouse clicks. Just write a =bash= script to invoke a command line program to do all the work for you. Go get a cup of coffee and come back when the job is done.\n\n\n\n\n\n\nFigure 4.2: How would you pronounce XKCD?\n\n\n\n\n   for i in *.MP4; \n   do name=`echo \"$i\" | cut -d'.' -f1`; \n   echo \"$name\"; \n   ffmpeg -i \"$i\" -c:v libx264 -b:v 1.5M -c:a aac -b:a 128k \"${name}S.mp4\";\n   done\n\nAlmost all of this I copied off the Internet where it appeared as an answer to a question from someone else wanting to do essentially the same thing I did. It took me a while to tweak it to my particular use case, but when that was done my problem was solved, /forever./ Every new batch of videos I just put in their own directory and run this script from the command line. Note that this script uses a for loop, this is a very common programming construct.\n\nfor (i in seq(1,5)) { print(i)}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n\n\n\n4.0.2.4.1 Resources on Terminals\nThere are a great many resources on how to use the terminal effectively, but don’t go out and read them all. One of the skills to learn in learning to use the computer is to develop your own set of links and resources you can go to when need arises. Don’t try to learn everything at once. You will get overwhelmed and discouraged. Instead you learn what you need when the need arises. And if you need to know something more than once, then you spend the time to dive deeper. There are a great many things about using the terminal that I do not know, but I know the ones I use often, and I know where to find more when I need to know more. You should do the same. Here are a few online resources to get you started.\n\nThe command line\nA Short Series of Terminal Lessons from the UbuntuWiki\nSome Scripting Basics\nAnother Scripting Introduction\n\nMost of what you want to do at the command line, at least in the beginning, you can do with typing directly into the terminal. But at some point you will want to write a file, a script, that has all the commands typed into it. They you can run that script from the terminal. This blog post has some basic background for how to get started.\nNote the use of the term “BASH”. This stands for the Bourne Again Shell. Your terminal can use different shells (and if you are using a mac you are probably using the zsh shell). So while you can use the terms interchangeably most of the time, they don’t mean exactly the same thing.\n\n\n4.0.2.4.2 Terminal Games\nThese will only work on linux and OS X. If you are on windows you could enable the linux subsystem for linux or you could learn the powershell equivalents. But I suggest that you use the terminals that are built into VS Code for practice. You will usually see these at the bottom of your screen. If not, there is a menu you can use to open one.\n\nls -la /home/\n\n\nWhat does all this output mean?\nWhat changes when you leave out the -la?\nWhat does the hyphen do?\n\n\nCan you find the location of your desktop folder in your terminal?\nCan you change to that directory? cd\nFind out where you are? pwd\nCan you find out who the computer thinks you are, your user name? whoami\nFind out how much free space you have on your computer disk. df -h\nHow do you get help for most of these commands? Usually command –help or (-h)\nHow do you find the manual? man ls\nNavigating\n\nPaths: absolute and relative.\nWhat do those “dots” mean?\nWhat do those slashes mean?\nTab is your friend.\nTry the up arrow too.\n\nFile ownership\n\nMake a text file from the command line. touch /home/yourname/Documents/testText.txt\nWho owns it?\n\nMake a directory mkdir /home/britt/Documents/myFirstDir/ Spaces are the enemy. Never use them, but if you have to, escape () them.\n\n\n\n\n4.0.2.5 Using the Terminal to Setup a Python Venv and install Jupyterlab\nOur goal is to be able to test and develop the idea of a jupyter lab notebook. But we will need several pieces of code installed. Assuming we have python3 installed we can use the terminal to set up a secure enviroment for creating a virtual environment. Think of a sandbox that let’s you play without getting the things you installed for experimentation conflict with your system’s tools.\n\nOpen a terminal\nMake a directory (mkdir)\n“cd” into your new directory and create the virtual environment\n\npython3 -m venv .\n\nNext, “activate” the environment with\n\nsource ./bin/activate\n\nNow you can install the needed packages with pip.\n\npip install numpy matplotlib jupyterlab\n\n\n\n\n4.0.2.6 Beginning with Jupyter and Quarto/VS\nGood instructions are on the Quarto website. Note those terminal commands.\nYou could at this point use the brower interface for editing your ipynb file with {sh} python3 -m jupyter lab or you could open a file in VS Code.\nMake sure you have the jupyter extension for vscode. Then you will want to create or open a new jupyter file and select the appropriate kernel (initially use python). If you are in the correct directory and had previously created a virtual environment then all should be good to go. And you can in the terminal invoke the quarto command to see your document with quarto preview my-demo-notebook.ipynb.\n\n\n\n4.0.3 Languages\n\n4.0.3.1 R\n\n4.0.3.1.1 Installation\n\nOSX\nWindows\nLinux\n\nDownload the CORRECT R\nFollow the appropriate instructions for your operating system.\nTest your installation by opening a TERMINAL and typing the capital letter R. You should end up in an interpreter. You can quit with quit().\nRestart R in a TERMINAL and install a package. A package is a collection of code, often much of it written in R, that is used for doing things in R. For example try:\n```{r}\ninstall.packages(\"tidyverse\")\n```\nThe tidyverse is a very popular collection of R code that itself will depend on many additional pieces of R code and other packages, some R and some not.\nIf that went well, you need to make sure you restart VS Code and then click on the little set of squares at the left to install the R extension for VS Code.\nIf all goes well check out the book on using R that is itself written in Quarto, by the programmer who authored the tidyverse. And make sure you can create a file in VSCode as a quarto document, cut and paste in some R code, and see the whole thing compile to a web page. This after all will be a homework.\n\nif(!require(tidyverse)){\n    install.packages(\"tidyverse\")\n}\n\nLoading required package: tidyverse\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nif(!require(palmerpenguins)){\n    install.packages(\"palmerpenguins\")\n}\n\nLoading required package: palmerpenguins\n\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n\nggplot(\n  data = penguins,\n  mapping = aes(x = flipper_length_mm, y = body_mass_g, color = species)\n) +\n  geom_point() +\n  geom_smooth(method = \"lm\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\n4.0.3.2 Python\n\n4.0.3.2.1 Installation\nInstallation Instructions\nInstall the mathplotlib and numpy packages.\n\n\n\n\n\n\nClass Discussion\n\n\n\nWhat is a “package” when talking about programming languages? What is a “library”? What is an “executable”?\n\n\n\n\n\n\n\n\nWarning\n\n\n\nAsk me about virtual environments!\n\n\nsetting up a venv in vscode and python\n\n\n4.0.3.2.2 Testing\n\n\n\n\n\n\nWarning\n\n\n\nYou may need to install the “reticulate” package for R if you want to run both python and R code in the same document as I am trying to do here.\n\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# fake data\nnp.random.seed(19680801)\ndata = np.random.lognormal(size=(37, 4), mean=1.5, sigma=1.75)\nlabels = list('ABCD')\nfs = 10  # fontsize\nfig, axs = plt.subplots(nrows=2, ncols=3, figsize=(6, 6), sharey=True)\naxs[0, 0].boxplot(data, tick_labels=labels)\n\n{'whiskers': [&lt;matplotlib.lines.Line2D object at 0x142707750&gt;, &lt;matplotlib.lines.Line2D object at 0x142707890&gt;, &lt;matplotlib.lines.Line2D object at 0x142750050&gt;, &lt;matplotlib.lines.Line2D object at 0x142750190&gt;, &lt;matplotlib.lines.Line2D object at 0x142750910&gt;, &lt;matplotlib.lines.Line2D object at 0x142750a50&gt;, &lt;matplotlib.lines.Line2D object at 0x1427511d0&gt;, &lt;matplotlib.lines.Line2D object at 0x142751310&gt;], 'caps': [&lt;matplotlib.lines.Line2D object at 0x1427079d0&gt;, &lt;matplotlib.lines.Line2D object at 0x142707b10&gt;, &lt;matplotlib.lines.Line2D object at 0x1427502d0&gt;, &lt;matplotlib.lines.Line2D object at 0x142750410&gt;, &lt;matplotlib.lines.Line2D object at 0x142750b90&gt;, &lt;matplotlib.lines.Line2D object at 0x142750cd0&gt;, &lt;matplotlib.lines.Line2D object at 0x142751450&gt;, &lt;matplotlib.lines.Line2D object at 0x142751590&gt;], 'boxes': [&lt;matplotlib.lines.Line2D object at 0x142707610&gt;, &lt;matplotlib.lines.Line2D object at 0x142707ed0&gt;, &lt;matplotlib.lines.Line2D object at 0x1427507d0&gt;, &lt;matplotlib.lines.Line2D object at 0x142751090&gt;], 'medians': [&lt;matplotlib.lines.Line2D object at 0x142707c50&gt;, &lt;matplotlib.lines.Line2D object at 0x142750550&gt;, &lt;matplotlib.lines.Line2D object at 0x142750e10&gt;, &lt;matplotlib.lines.Line2D object at 0x1427516d0&gt;], 'fliers': [&lt;matplotlib.lines.Line2D object at 0x142707d90&gt;, &lt;matplotlib.lines.Line2D object at 0x142750690&gt;, &lt;matplotlib.lines.Line2D object at 0x142750f50&gt;, &lt;matplotlib.lines.Line2D object at 0x142751810&gt;], 'means': []}\n\naxs[0, 0].set_title('Default', fontsize=fs)\n\naxs[0, 1].boxplot(data, tick_labels=labels, showmeans=True)\n\n{'whiskers': [&lt;matplotlib.lines.Line2D object at 0x142751a90&gt;, &lt;matplotlib.lines.Line2D object at 0x142751bd0&gt;, &lt;matplotlib.lines.Line2D object at 0x142752490&gt;, &lt;matplotlib.lines.Line2D object at 0x1427525d0&gt;, &lt;matplotlib.lines.Line2D object at 0x142752e90&gt;, &lt;matplotlib.lines.Line2D object at 0x142752fd0&gt;, &lt;matplotlib.lines.Line2D object at 0x142753890&gt;, &lt;matplotlib.lines.Line2D object at 0x1427539d0&gt;], 'caps': [&lt;matplotlib.lines.Line2D object at 0x142751d10&gt;, &lt;matplotlib.lines.Line2D object at 0x142751e50&gt;, &lt;matplotlib.lines.Line2D object at 0x142752710&gt;, &lt;matplotlib.lines.Line2D object at 0x142752850&gt;, &lt;matplotlib.lines.Line2D object at 0x142753110&gt;, &lt;matplotlib.lines.Line2D object at 0x142753250&gt;, &lt;matplotlib.lines.Line2D object at 0x142753b10&gt;, &lt;matplotlib.lines.Line2D object at 0x142753c50&gt;], 'boxes': [&lt;matplotlib.lines.Line2D object at 0x142751950&gt;, &lt;matplotlib.lines.Line2D object at 0x142752350&gt;, &lt;matplotlib.lines.Line2D object at 0x142752d50&gt;, &lt;matplotlib.lines.Line2D object at 0x142753750&gt;], 'medians': [&lt;matplotlib.lines.Line2D object at 0x142751f90&gt;, &lt;matplotlib.lines.Line2D object at 0x142752990&gt;, &lt;matplotlib.lines.Line2D object at 0x142753390&gt;, &lt;matplotlib.lines.Line2D object at 0x142753d90&gt;], 'fliers': [&lt;matplotlib.lines.Line2D object at 0x142752210&gt;, &lt;matplotlib.lines.Line2D object at 0x142752c10&gt;, &lt;matplotlib.lines.Line2D object at 0x142753610&gt;, &lt;matplotlib.lines.Line2D object at 0x1427bc050&gt;], 'means': [&lt;matplotlib.lines.Line2D object at 0x1427520d0&gt;, &lt;matplotlib.lines.Line2D object at 0x142752ad0&gt;, &lt;matplotlib.lines.Line2D object at 0x1427534d0&gt;, &lt;matplotlib.lines.Line2D object at 0x142753ed0&gt;]}\n\naxs[0, 1].set_title('showmeans=True', fontsize=fs)\n\naxs[0, 2].boxplot(data, tick_labels=labels, showmeans=True, meanline=True)\n\n{'whiskers': [&lt;matplotlib.lines.Line2D object at 0x1427bc2d0&gt;, &lt;matplotlib.lines.Line2D object at 0x1427bc410&gt;, &lt;matplotlib.lines.Line2D object at 0x1427bccd0&gt;, &lt;matplotlib.lines.Line2D object at 0x1427bce10&gt;, &lt;matplotlib.lines.Line2D object at 0x1427bd6d0&gt;, &lt;matplotlib.lines.Line2D object at 0x1427bd810&gt;, &lt;matplotlib.lines.Line2D object at 0x1427be0d0&gt;, &lt;matplotlib.lines.Line2D object at 0x1427be210&gt;], 'caps': [&lt;matplotlib.lines.Line2D object at 0x1427bc550&gt;, &lt;matplotlib.lines.Line2D object at 0x1427bc690&gt;, &lt;matplotlib.lines.Line2D object at 0x1427bcf50&gt;, &lt;matplotlib.lines.Line2D object at 0x1427bd090&gt;, &lt;matplotlib.lines.Line2D object at 0x1427bd950&gt;, &lt;matplotlib.lines.Line2D object at 0x1427bda90&gt;, &lt;matplotlib.lines.Line2D object at 0x1427be350&gt;, &lt;matplotlib.lines.Line2D object at 0x1427be490&gt;], 'boxes': [&lt;matplotlib.lines.Line2D object at 0x1427bc190&gt;, &lt;matplotlib.lines.Line2D object at 0x1427bcb90&gt;, &lt;matplotlib.lines.Line2D object at 0x1427bd590&gt;, &lt;matplotlib.lines.Line2D object at 0x1427bdf90&gt;], 'medians': [&lt;matplotlib.lines.Line2D object at 0x1427bc7d0&gt;, &lt;matplotlib.lines.Line2D object at 0x1427bd1d0&gt;, &lt;matplotlib.lines.Line2D object at 0x1427bdbd0&gt;, &lt;matplotlib.lines.Line2D object at 0x1427be5d0&gt;], 'fliers': [&lt;matplotlib.lines.Line2D object at 0x1427bca50&gt;, &lt;matplotlib.lines.Line2D object at 0x1427bd450&gt;, &lt;matplotlib.lines.Line2D object at 0x1427bde50&gt;, &lt;matplotlib.lines.Line2D object at 0x1427be850&gt;], 'means': [&lt;matplotlib.lines.Line2D object at 0x1427bc910&gt;, &lt;matplotlib.lines.Line2D object at 0x1427bd310&gt;, &lt;matplotlib.lines.Line2D object at 0x1427bdd10&gt;, &lt;matplotlib.lines.Line2D object at 0x1427be710&gt;]}\n\naxs[0, 2].set_title('showmeans=True,\\nmeanline=True', fontsize=fs)\n\naxs[1, 0].boxplot(data, tick_labels=labels, showbox=False, showcaps=False)\n\n{'whiskers': [&lt;matplotlib.lines.Line2D object at 0x1427bec10&gt;, &lt;matplotlib.lines.Line2D object at 0x1427bed50&gt;, &lt;matplotlib.lines.Line2D object at 0x1427bf110&gt;, &lt;matplotlib.lines.Line2D object at 0x1427bf250&gt;, &lt;matplotlib.lines.Line2D object at 0x1427bf610&gt;, &lt;matplotlib.lines.Line2D object at 0x1427bf750&gt;, &lt;matplotlib.lines.Line2D object at 0x1427bfb10&gt;, &lt;matplotlib.lines.Line2D object at 0x1427bfc50&gt;], 'caps': [], 'boxes': [], 'medians': [&lt;matplotlib.lines.Line2D object at 0x1427bee90&gt;, &lt;matplotlib.lines.Line2D object at 0x1427bf390&gt;, &lt;matplotlib.lines.Line2D object at 0x1427bf890&gt;, &lt;matplotlib.lines.Line2D object at 0x1427bfd90&gt;], 'fliers': [&lt;matplotlib.lines.Line2D object at 0x1427befd0&gt;, &lt;matplotlib.lines.Line2D object at 0x1427bf4d0&gt;, &lt;matplotlib.lines.Line2D object at 0x1427bf9d0&gt;, &lt;matplotlib.lines.Line2D object at 0x1427bfed0&gt;], 'means': []}\n\ntufte_title = 'Tufte Style \\n(showbox=False,\\nshowcaps=False)'\naxs[1, 0].set_title(tufte_title, fontsize=fs)\n\naxs[1, 1].boxplot(data, tick_labels=labels, notch=True, bootstrap=10000)\n\n{'whiskers': [&lt;matplotlib.lines.Line2D object at 0x142834190&gt;, &lt;matplotlib.lines.Line2D object at 0x1428342d0&gt;, &lt;matplotlib.lines.Line2D object at 0x142834a50&gt;, &lt;matplotlib.lines.Line2D object at 0x142834b90&gt;, &lt;matplotlib.lines.Line2D object at 0x142835310&gt;, &lt;matplotlib.lines.Line2D object at 0x142835450&gt;, &lt;matplotlib.lines.Line2D object at 0x142835bd0&gt;, &lt;matplotlib.lines.Line2D object at 0x142835d10&gt;], 'caps': [&lt;matplotlib.lines.Line2D object at 0x142834410&gt;, &lt;matplotlib.lines.Line2D object at 0x142834550&gt;, &lt;matplotlib.lines.Line2D object at 0x142834cd0&gt;, &lt;matplotlib.lines.Line2D object at 0x142834e10&gt;, &lt;matplotlib.lines.Line2D object at 0x142835590&gt;, &lt;matplotlib.lines.Line2D object at 0x1428356d0&gt;, &lt;matplotlib.lines.Line2D object at 0x142835e50&gt;, &lt;matplotlib.lines.Line2D object at 0x142835f90&gt;], 'boxes': [&lt;matplotlib.lines.Line2D object at 0x142834050&gt;, &lt;matplotlib.lines.Line2D object at 0x142834910&gt;, &lt;matplotlib.lines.Line2D object at 0x1428351d0&gt;, &lt;matplotlib.lines.Line2D object at 0x142835a90&gt;], 'medians': [&lt;matplotlib.lines.Line2D object at 0x142834690&gt;, &lt;matplotlib.lines.Line2D object at 0x142834f50&gt;, &lt;matplotlib.lines.Line2D object at 0x142835810&gt;, &lt;matplotlib.lines.Line2D object at 0x1428360d0&gt;], 'fliers': [&lt;matplotlib.lines.Line2D object at 0x1428347d0&gt;, &lt;matplotlib.lines.Line2D object at 0x142835090&gt;, &lt;matplotlib.lines.Line2D object at 0x142835950&gt;, &lt;matplotlib.lines.Line2D object at 0x142836210&gt;], 'means': []}\n\naxs[1, 1].set_title('notch=True,\\nbootstrap=10000', fontsize=fs)\n\naxs[1, 2].boxplot(data, tick_labels=labels, showfliers=False)\n\n{'whiskers': [&lt;matplotlib.lines.Line2D object at 0x142836490&gt;, &lt;matplotlib.lines.Line2D object at 0x1428365d0&gt;, &lt;matplotlib.lines.Line2D object at 0x142836c10&gt;, &lt;matplotlib.lines.Line2D object at 0x142836d50&gt;, &lt;matplotlib.lines.Line2D object at 0x142837390&gt;, &lt;matplotlib.lines.Line2D object at 0x1428374d0&gt;, &lt;matplotlib.lines.Line2D object at 0x142837b10&gt;, &lt;matplotlib.lines.Line2D object at 0x142837c50&gt;], 'caps': [&lt;matplotlib.lines.Line2D object at 0x142836710&gt;, &lt;matplotlib.lines.Line2D object at 0x142836850&gt;, &lt;matplotlib.lines.Line2D object at 0x142836e90&gt;, &lt;matplotlib.lines.Line2D object at 0x142836fd0&gt;, &lt;matplotlib.lines.Line2D object at 0x142837610&gt;, &lt;matplotlib.lines.Line2D object at 0x142837750&gt;, &lt;matplotlib.lines.Line2D object at 0x142837d90&gt;, &lt;matplotlib.lines.Line2D object at 0x142837ed0&gt;], 'boxes': [&lt;matplotlib.lines.Line2D object at 0x142836350&gt;, &lt;matplotlib.lines.Line2D object at 0x142836ad0&gt;, &lt;matplotlib.lines.Line2D object at 0x142837250&gt;, &lt;matplotlib.lines.Line2D object at 0x1428379d0&gt;], 'medians': [&lt;matplotlib.lines.Line2D object at 0x142836990&gt;, &lt;matplotlib.lines.Line2D object at 0x142837110&gt;, &lt;matplotlib.lines.Line2D object at 0x142837890&gt;, &lt;matplotlib.lines.Line2D object at 0x14289c050&gt;], 'fliers': [], 'means': []}\n\naxs[1, 2].set_title('showfliers=False', fontsize=fs)\n\nfor ax in axs.flat:\n    ax.set_yscale('log')\n    ax.set_yticklabels([])\n\n[Text(0, 0.001, ''), Text(0, 0.01, ''), Text(0, 0.1, ''), Text(0, 1.0, ''), Text(0, 10.0, ''), Text(0, 100.0, ''), Text(0, 1000.0, ''), Text(0, 10000.0, '')]\n[]\n[]\n[Text(0, 0.001, ''), Text(0, 0.01, ''), Text(0, 0.1, ''), Text(0, 1.0, ''), Text(0, 10.0, ''), Text(0, 100.0, ''), Text(0, 1000.0, ''), Text(0, 10000.0, '')]\n[]\n[]\n\n\nfig.subplots_adjust(hspace=0.4)\n\n\n\n\n\n\n\n\n\n\n\n4.0.3.3 Javascript",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Coding</span>"
    ]
  },
  {
    "objectID": "cWriting.html",
    "href": "cWriting.html",
    "title": "5  Writing Scientific Documents",
    "section": "",
    "text": "Papers Posters Websites Books Math Formulas Images Graphs References Analyses/Code\nWhat is RStudio? What happened to RStudio? How does Quarto relate to RStudio? What languages does it support? Can you write code in it? Can you write text in it? Can you write an article in it?\n\n5.0.1 Scientific Publishing Tools\nWhat is a markup language?\nWhat are the advantages/disadvantages of using a tool other that Word for writing up your research?\nWrite once use everywhere.\nSome of the available options.\n\nLaTeX This was the standard for several decades, and used more by mathematicians than others, but today it seems limited in that it produces mostly pdfs, and many people also want their files to export to html (webpages)\nA guide to LaTex for Word Users (pdf)\nThe descendants of markdown\nQuarto (we will skip Rmd and since we are using its successor qmd. Both are related to the people who wrote RStudio,knitr, and are now known as Posit).\n\nHere are some of the helper links for things we can do with Quarto: - journal formats try the Elsevier format for this course. A lot of psych journals are Elsevier owned. - presentation - Talking to databases. - Make a website/blog for your work or lab - And more …",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Writing Scientific Documents</span>"
    ]
  },
  {
    "objectID": "cExps.html",
    "href": "cExps.html",
    "title": "6  In Lab Experiments",
    "section": "",
    "text": "Making stuff appear on monitors.\nWhat is OpenGL?\nUse pygame to make some simple visual experiments.\nHave a beauty contest the following week to see what people have been able to make?\nMake sure that people are using venv\n\n\n6.0.1 Online Experiments\nRunning a server for testing and more? XAMPP Running a lab now seems to require some familiarity with servers. And people who want to write their experiments in javascript often want to try things out first so it seems something like XAMPP might be a good resource. Exercise to download and get the XAMPP server running? Need to expand this. An exercise with JavaScript? This site has a simple bit of code for throwing an image on the screen. Then use the XAMPP server to test it? Require changing the image? Animate a button to toggle or get a random image?",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>In Lab Experiments</span>"
    ]
  },
  {
    "objectID": "cBiblio.html",
    "href": "cBiblio.html",
    "title": "7  What are some of the challenges that computational tools pose for reproducibility?",
    "section": "",
    "text": "8 Knowledge Management (Zettlekasten)",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>What are some of the challenges that computational tools pose for reproducibility?</span>"
    ]
  },
  {
    "objectID": "cBiblio.html#using-references-with-quatro-and-vs-code",
    "href": "cBiblio.html#using-references-with-quatro-and-vs-code",
    "title": "7  What are some of the challenges that computational tools pose for reproducibility?",
    "section": "9.1 Using References With Quatro and VS Code",
    "text": "9.1 Using References With Quatro and VS Code",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>What are some of the challenges that computational tools pose for reproducibility?</span>"
    ]
  },
  {
    "objectID": "cBiblio.html#using-references-with-overleaf",
    "href": "cBiblio.html#using-references-with-overleaf",
    "title": "7  What are some of the challenges that computational tools pose for reproducibility?",
    "section": "9.2 Using References With Overleaf",
    "text": "9.2 Using References With Overleaf\nVS Code is not your only option. Overleaf also use “.bib” files to hold references, though some of the other syntax is different.\nHere are some links to get you started with references in overleaf. 1. Linking Overleaf and Zotero 2. [Connecting Zotero and Quarto](https://quarto.org/docs/visual-editor/technical.html#citations-from-zotero)",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>What are some of the challenges that computational tools pose for reproducibility?</span>"
    ]
  },
  {
    "objectID": "cBiblio.html#poster-presentations-move-this-section",
    "href": "cBiblio.html#poster-presentations-move-this-section",
    "title": "7  What are some of the challenges that computational tools pose for reproducibility?",
    "section": "9.3 Poster Presentations ? (MOVE THIS SECTION)",
    "text": "9.3 Poster Presentations ? (MOVE THIS SECTION)\n[Scientific Posters with Quarto](https://github.com/quarto-ext/typst-templates/tree/main/poster)\nLaTeX and Knitr in Overleaf][knitr]] with overleaf. A scientific poster with Overleaf?",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>What are some of the challenges that computational tools pose for reproducibility?</span>"
    ]
  },
  {
    "objectID": "cServer.html",
    "href": "cServer.html",
    "title": "8  Testing Your Javascript",
    "section": "",
    "text": "8.1 Run your own server locally\nRunning a lab now seems to require some familiarity with servers. And people who want to write their experiments in javascript often want to try things out first so it seems something like XAMMP is a good tool to know about.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Testing Your Javascript</span>"
    ]
  },
  {
    "objectID": "cServer.html#run-your-own-server-locally",
    "href": "cServer.html#run-your-own-server-locally",
    "title": "8  Testing Your Javascript",
    "section": "",
    "text": "8.1.1 XAMPP\nXAMMP\n\n8.1.1.1 Downloading\nDownload link\n\n\n\n8.1.2 In Lab Experiments\n\nMaking stuff appear on monitors.\nWhat is OpenGL?\nUse pygame to make some simple visual experiments.\nHave a beauty contest the following week to see what people have been able to make?\nMake sure that people are using venv\n\n\n\n8.1.3 Online Experiments\nAn exercise with JavaScript? This site has a simple bit of code for throwing an image on the screen.\nCan you use the XAMPP server to test it? Require changing the image? Animate a button to toggle or get a random image? WIP HERE",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Testing Your Javascript</span>"
    ]
  },
  {
    "objectID": "cLLM.html",
    "href": "cLLM.html",
    "title": "9  Large Language Models",
    "section": "",
    "text": "9.1 Run locally\nWhy? Own your own data.\nSecurity and Privacy.\nResearch applications you may not want participants’ data fed to openAI or other proprietary vendors.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Large Language Models</span>"
    ]
  },
  {
    "objectID": "cLLM.html#how-to",
    "href": "cLLM.html#how-to",
    "title": "9  Large Language Models",
    "section": "9.2 How to?",
    "text": "9.2 How to?\nThere are many methods to running LLMs locally on your own hardward. I have chosen GPT4All. It can run under OSX, Windows, and Ubuntu (linux).\n\n9.2.1 Key Features of GPT4ALL\nAccording to the website https://getstream.io/blog/best-local-llm-tools/:\nGPT4All can run LLMs on major consumer hardware such as Mac M-Series chips, AMD and NVIDIA GPUs. The following are its key features.\n\nPrivacy First: Keep private and sensitive chat information and prompts only on your machine.\nNo Internet Required: It works completely offline.\nModels Exploration: This feature allows developers to browse and download different kinds of LLMs to experiment with. You can select about 1000 open-source language models from popular options like LLama, Mistral, and more.\nLocal Documents: You can let your local LLM access your sensitive data with local documents like .pdf and .txt without data leaving your device and without a network.\nCustomization options: It provides several chatbot adjustment options like temperature, batch size, context length, etc.\nEnterprise Edition: GPT4ALL provides an enterprise package with security, support, and per-device licenses to bring local AI to businesses.\n\nIt is also a very popular LLM for self-hosting (second only to Ollama, which you should also try out).",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Large Language Models</span>"
    ]
  },
  {
    "objectID": "cLLM.html#how-to-1",
    "href": "cLLM.html#how-to-1",
    "title": "9  Large Language Models",
    "section": "9.3 How-to",
    "text": "9.3 How-to\nFrom the GPT4all download page download the version for your operating system.\nFollow the download instructions appropriate to your system and pay particular attention to any warnings and make sure that you have sufficient freespace. This is a big application and the model parameters are also quite large.\nAfter you have successfully downloaded and installed the program checkout the quickstart guide.\n\nStart Chatting\nInstall a Model\nI tried “Llama 3.2 1b Instruct”\nLoad the model\nStart chatting",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Large Language Models</span>"
    ]
  },
  {
    "objectID": "cLLM.html#using-llms-for-dynamic-research",
    "href": "cLLM.html#using-llms-for-dynamic-research",
    "title": "9  Large Language Models",
    "section": "9.4 Using LLMs for Dynamic Research",
    "text": "9.4 Using LLMs for Dynamic Research\nWhat are the mechanics we need for this? We need our model to accept input and generate output and we need a method to transfer the elements of the conversation back and forth. The first stage is to think of the components we have used so far and how we might stitch them together for this task.\nIt is also a useful transitional step to work incrementally. First, maybe try to set up an interface to allow someone to talk to the model via a web interface. Then you might be able to figure out how to use GET and POST from PHP to communicate between two web servers. There are definitely better ways to do that, but it is a fairly direct starting point. If you want an additional challenge perhaps try to use the tool: curl.\n\n\n\n\n\n\nClassroom Exercise\n\n\n\nDownload and implement the above.\nStart the GPT4All Server\nSee if you can get your GPT4All model to talk to another group’s model.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Large Language Models</span>"
    ]
  },
  {
    "objectID": "cLLM.html#why-might-you-want-to-do-this",
    "href": "cLLM.html#why-might-you-want-to-do-this",
    "title": "9  Large Language Models",
    "section": "9.5 Why Might You Want To Do This?",
    "text": "9.5 Why Might You Want To Do This?\nDurably reducing conspiracy beliefs through dialogues with AI\n\nThis LinkedIn post talks about ChatGPT integration. What would you have to change to get it working with your local server?\n\n\n\n\n\n\nClass Question\n\n\n\nWhat is a RAG in this context?",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Large Language Models</span>"
    ]
  },
  {
    "objectID": "cLLM.html#next-steps",
    "href": "cLLM.html#next-steps",
    "title": "9  Large Language Models",
    "section": "9.6 Next steps",
    "text": "9.6 Next steps\nRecently (Duan, Li, and Cai 2024) has published an R package to make all of this easier. The github repository has the library, a “read-me” and installation instructions. Our class activity is to see if anyone can get this up and working by next week.\n\n\n\n\nDuan, Xufeng, Shixuan Li, and Zhenguang G. Cai. 2024. “MacBehaviour: An r Package for Behavioural Experimentation on Large Language Models.” Behavior Research Methods 57 (1). https://doi.org/10.3758/s13428-024-02524-y.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Large Language Models</span>"
    ]
  },
  {
    "objectID": "cDatabase.html",
    "href": "cDatabase.html",
    "title": "10  Databases and management",
    "section": "",
    "text": "What is it\nA book on DuckDB - database stuff\nMariaDB This SQL like, and open source. Might be easier to get started with and still be SQL enough to give them some professional benefits. I was thinking we could get some data online, often they come as CSV’s and read it into the database? This is one example how. A blog that compares MariaDB to SQL. A quickie tutorial.\nWhy would I want to use a relational database over a csv file (or R data frame or similar)? This could be a class exercise and discussion.\nExercise Download MariaDB\n\n\n10.0.1 Datascience\n\none person’s roadmap for non-cs grads\n\n\n\n10.0.2 Grant Funding\nAt the moment I am not sure if will have time for this. But thinking of having the students review the peer review manual for NSERC Discovery Grants. Then have them each write a minimal proposal. Assign the proposals to members of the class, and then hold our own reviewers meeting to decide which projects to fund. Top grants get performed for experiments? Get extra-credit points?",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Databases and management</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "11  Summary",
    "section": "",
    "text": "In summary, I have not gotten to writing a summary yet.",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Summary</span>"
    ]
  },
  {
    "objectID": "cGit.html",
    "href": "cGit.html",
    "title": "Appendix A — Version Control",
    "section": "",
    "text": "A.1 Getting Started - Some old videos on git from PSYCH363/310\nA few years ago when I was teaching a more elementary version of some of this material (PSYCH363) I included some videos on git and using Github. Some components of these videos may be a bit out of date, and a few things about the interface have changed. Still they may be a reasonable starting point for those of you who feel you need a refresher on version control. Note that for PSYCH390 I am assuming you can either already use version control or figure it out on your own. I will give some class time for getting things working, but mostly you will have to pursue this on your own. The notes here are intended to be prompts and guides, but not to be comprehensive.\nYou will notice that in the videos I talk a lot about Linux. We are not using that for this course so you can ignore those references. However, I do demonstrate the use in the terminal. That is available to all of you regardless of operating system. You will just have to find your own OS version of it.\nFrequenly you will see this referred to as a command line tool (“cli”). It is now easier to get this this working on Windows and OSX than it used to be. For OSX you can also check out Homebrew. For the adventurous Windows user you can look at WSL2.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Version Control</span>"
    ]
  },
  {
    "objectID": "cGit.html#an-overview-of-git-and-github",
    "href": "cGit.html#an-overview-of-git-and-github",
    "title": "Appendix A — Version Control",
    "section": "A.2 An overview of git and Github",
    "text": "A.2 An overview of git and Github",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Version Control</span>"
    ]
  },
  {
    "objectID": "cGit.html#you-have-choices---other-version-control-system",
    "href": "cGit.html#you-have-choices---other-version-control-system",
    "title": "Appendix A — Version Control",
    "section": "A.3 You have choices - other version control system",
    "text": "A.3 You have choices - other version control system\n\nMercurial\nDarcs\nCVS\nSubversion\nPijul\n\nEach has their own fans. CVS and Subversion are more legacy options, but you will still see them occasionally. Darcs is more of an experiment than a broadly used system. Mercurial used to be the cool kid, but now seems eclipsed by Pijul. That is the one for experimental users.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Version Control</span>"
    ]
  },
  {
    "objectID": "cGit.html#git-is-not-github",
    "href": "cGit.html#git-is-not-github",
    "title": "Appendix A — Version Control",
    "section": "A.4 Git is not Github",
    "text": "A.4 Git is not Github\nGit is the version control software. Github is a very popular place to host your publically accessible git repository, but it is far from your only option. You can host elsewhere.\n\nOSF.io For scientists OSF.io seeks to make itself a way to host scientific projects and their data. Trivia question? Do I have any repositories on Osf.io?\nSourceforge An oldie, but still used.\nBitbucket\nGitlab The university provides you with a gitlab account: https://git.uwaterloo.ca\nCodeberg If you believe in freedom and neck beards.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Version Control</span>"
    ]
  },
  {
    "objectID": "cGit.html#things-you-should-do",
    "href": "cGit.html#things-you-should-do",
    "title": "Appendix A — Version Control",
    "section": "A.5 Things you should do",
    "text": "A.5 Things you should do\n\nInstall git\nGet an account on github\nFork the course repository\nClone the course repository to your laptop\nSet up my version as an additional remote.\nSee if you can make a “pull request” to me. You may find that you have to set up an ssh key in order to efficiently pull and push to Github. Github has very clear instructions on how to go about doing this.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Version Control</span>"
    ]
  },
  {
    "objectID": "cGit.html#but-first",
    "href": "cGit.html#but-first",
    "title": "Appendix A — Version Control",
    "section": "A.6 But first",
    "text": "A.6 But first\nIf you have not used git before you will have to configure git. It needs to know who you are and how to reach you at least.\nYou can execute commands like this in your terminal:\ngit config --global user.name \"John Doe\"\ngit config --global user.email johndoe@example.com\nMore on these configuration options can be found in a nice online book.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Version Control</span>"
    ]
  },
  {
    "objectID": "cGit.html#understanding-git-and-the-workflow-in-pictures",
    "href": "cGit.html#understanding-git-and-the-workflow-in-pictures",
    "title": "Appendix A — Version Control",
    "section": "A.7 Understanding Git and the Workflow in Pictures",
    "text": "A.7 Understanding Git and the Workflow in Pictures\nWhen starting to use git I found it very confusing to tell what was where and what direction things were going when I pushed and pulled. I found pictures helpful adjuncts to the prose descriptions. A few helpful illustrations to the distinction of clones, forks, pull, push, and pull request can be found here.\nI also made a little video to try and illustrate some of these concepts a few years ago. Read for the gist and not for the specific examples.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Version Control</span>"
    ]
  },
  {
    "objectID": "cGit.html#principal-terms-to-learn-first",
    "href": "cGit.html#principal-terms-to-learn-first",
    "title": "Appendix A — Version Control",
    "section": "A.8 Principal Terms to Learn First",
    "text": "A.8 Principal Terms to Learn First\n\nFork: A copy of one github repository to another github repository.\nClone: A copy of one git repository to another git repository. The first repository might be hosted on github, but the second one, the cloned one exists on a local machine. In your case this is probably your laptop.\nRemote: This is a repository that you are following. You will typically pull from these, but your push permissions may be limited depending on the distinctions between forks and clones, and whether you own the remote or someone else does. You can have more than one remote.\nPull: the transfer of information and changes from one repository incorporated into another. This is how you get the new information from a remote transported to a local repository that you control.\nPush: this is the transfer of information to a repository you control (or have permissions to push to) from another repository that you control. This is often from your local laptop version to the hosted repository (your fork) on github.\nPull Request: When you have information or changes that you think would be helpful to a remote you do not have push permissions for then you can request that the owner of that repository pull in your changes. This is a formal process called a pull request. It is primarily a github concept and not a git concept.\nBranch: within a repository the development of the code may be proceeding in a few different directions at the same time. The principal production branch is conventionally called master. And the principal repository that is the main, shared one is called origin. We will not be working with branches in our course, but those terms do show up in commands.\n\nAll of these “basics” are covered in detail in the book Pro Git (available on line).",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Version Control</span>"
    ]
  },
  {
    "objectID": "cOSX.html",
    "href": "cOSX.html",
    "title": "Quarto Basics",
    "section": "",
    "text": "C Emacs\nI used homebrew awhile ago for this and forgot the details.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Quarto Basics</span>"
    ]
  },
  {
    "objectID": "cOSX.html#init-files",
    "href": "cOSX.html#init-files",
    "title": "Quarto Basics",
    "section": "C.1 init files",
    "text": "C.1 init files\nSeems to live at ~/.emacs.d/init.el\nAdded these lines and restarted to get the basic package set up working.\n(require 'package)\n(add-to-list 'package-archives '(\"melpa\" . \"https://melpa.org/packages/\") t)\n(package-initialize)\n(require 'use-package)\n(setq use-package-always-ensure t)",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Quarto Basics</span>"
    ]
  },
  {
    "objectID": "cOSX.html#pdf-mode",
    "href": "cOSX.html#pdf-mode",
    "title": "Quarto Basics",
    "section": "C.2 pdf-mode",
    "text": "C.2 pdf-mode\nDo a package-list-packages to get a refesh and install (mark with an “i”) the pdf-tools package from melpa. Then you “x” to execute the installation. Afterwards you need to run M-x pdf-tools-install. This can take awhile.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Quarto Basics</span>"
    ]
  },
  {
    "objectID": "cOSX.html#keys-and-keyboards",
    "href": "cOSX.html#keys-and-keyboards",
    "title": "Quarto Basics",
    "section": "C.3 keys and keyboards",
    "text": "C.3 keys and keyboards\nSeveral emacs shortcuts conflict with defaults on mac. You can change these in the system utilities for keyboard shortcuts. Just search them out as they arise and turn off the mac ones. The ctrl key is ^ in their printed list.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Quarto Basics</span>"
    ]
  },
  {
    "objectID": "cOSX.html#orgmode-related",
    "href": "cOSX.html#orgmode-related",
    "title": "Quarto Basics",
    "section": "C.4 orgmode related",
    "text": "C.4 orgmode related\n\nfor exporting html needed to install package htmlize.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Quarto Basics</span>"
    ]
  },
  {
    "objectID": "cOSX.html#emacs-1",
    "href": "cOSX.html#emacs-1",
    "title": "Quarto Basics",
    "section": "C.5 emacs",
    "text": "C.5 emacs\nThere is a quarto editing mode which I installed through the packaging tools.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Quarto Basics</span>"
    ]
  }
]