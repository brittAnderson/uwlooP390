# Programming Experiments

One of the most common uses of computers in psychology is for the programming of experiments. Classic experiments often involve a combination of visual stimuli that the participant has to respond to in someway. Typical responses are often button presses or mouse clicks, though many other varieties of stimuli and reports are used. While many programming languages can be used for this task we will begin with one of the most popular, Python. And if time permits we can explore some examples with Javascript as the world of experimental psychology is increasingly complementing the usual lab based testing paradigm with online studies. 

## All-in-one options

Excellent tools exist that provide turn-key solutions. A very popular one is [Psychopy](https://www.psychopy.org/). This package is available for the popular operating systems and gives a gui like builder that allows you to program visually. It offers the opportunity to output your experiment into a web friendly format that can integrate with an online hosting service for performing experiments. However, my experience is that while such tools make it easy to get started they don't help people develop the general skills that will transfer into programming that distinctive experiment that no one else has done. And the knowledge you gain is often interface specific. It is not general, and so your learning cannot transfer into writing R code or porting your experiment to MATLAB if that becomes the tool a collaborator wants to use. Even if this is the sort of tool you eventually settle on for the very reasonable reasons that your experimental needs are not complex and the quality of the implementation allows you to get work done more easily and on board new investigators more quickly, it will still make you better at planning and handling problems if you have a knowledge of what is going on under the hood.

## Python

The following examples focus on the sort of experiment where you want something to appear on the screen, and you want feedback from the participant. Current computer graphics don't work like they did twenty years ago when we all had heavy CRTs on our desks, but one can still deploy some of the intuitions of that era.

The monitor is a screen and it is displaying a picture. In the background what is to be shown next is in preparation and at some point what is on the display now will be replaced by the next collection in the queue. Even though we no longer literally raster the display from top to bottom and side to side you can still usefully think in terms of *frames*. Thus, almost all your experiments will need the mechanics of a window the participant views and in which you can write things you want them to see. 

### Pygame
For practice I will use the [pygame](https://www.pygame.org) python library. There are a large number of help and tutorials for this well established library that has been in use for decades. It is well vetted and documented, and relies on a simple direct library for video manipulations. 

#### Some Links for Getting Started with Pygame
1. The pygame [getting started wiki](https://www.pygame.org/wiki/GettingStarted).
   Most of my examples will draw from this site. 
2. Real python [pygame tutorial](https://realpython.com/pygame-a-primer/)
3. [Game Development Academy](https://gamedevacademy.org/pygame-code-tutorial-complete-guide/)

#### Installation
A virtual environment is recommended, but not necessary. If you are using a venv activate it first.

Then 

```python
pip install pygame # <1>

python -m pygame.examples.aliens # <2>
```
1. This line installs the library.
2. This launches a test game. If you see the game, you have installed pygame. I find this game plays a little fast on modern hardware.

::: {#fig-basicimports}

```python
import pygame
pygame.init()

mywindow = pygame.display.set_mode([800,800])
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
    mywindow.fill((128,15,15))
    pygame.display.flip()
        
pygame.quit()

```

This python program will, assuming you have installed pygame, launch a window and close it when you click the "x". Can you change the window size and background color?

:::

One of the better ways to get started is to gradually hand in functionality one step at a time until you have the basics of what you need on a trial and then to refine that to loop through the multiple trials you will probably need. 

Here is an example of a bit of code that shows some elementary use of the mouse, response time, shape and text functionality. 

```python
from itertools import compress
import pygame
pygame.init()


my_font = pygame.font.Font(None,72)
test_text = my_font.render("Hello P390", 1, (200,10,200))
test_text_pos = test_text.get_rect(centerx = 400)

#Helper functions
def which_buttons (bs):
    return(list(compress(range(len(bs)),bs)))

#button colors
clrs = [(0,0,255),(0,225,0),(225,0,0)]
actv_clr = 0
rslts = {'trial_num': -1,'color' : None ,'time' : None}

mywindow = pygame.display.set_mode([800,800])
running = True
myrt_clock = pygame.time.Clock()
t1 = myrt_clock.tick(60)
anew = pygame.mouse.get_pressed()
trl = -1,
clr = clrs[0]
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
    mywindow.fill((128,15,15))
    pygame.draw.circle(mywindow, clrs[actv_clr], (400,400), 75)
    mywindow.blit(test_text, test_text_pos)
    pygame.display.flip()
    aold = pygame.mouse.get_pressed()
    if(any(aold) and (aold != anew)):
        t2 = myrt_clock.tick(60)
        rslts['time'] = t2 - t1
        rslts['trial_num'] = rslts['trial_num'] + 1
        actv_clr = which_buttons(aold)[0]
        rslts['color'] = actv_clr
        anew = aold
        print(rslts)
        
pygame.quit()
```

#### Next Steps

You will want to save your data. As a first step see if you can [open a file](https://www.w3schools.com/python/python_file_handling.asp), and the if you can use the dictionary created to [add lines to a csv file](https://docs.python.org/3/library/csv.html). 


## Javascript 
WIP